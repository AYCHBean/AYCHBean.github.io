{
  "swagger": "2.0",
  "info": {
    "version": "v3",
    "title": "AYCHBean API",
    "description": "AYCHBean provides a simple and powerful API consisting of REST endpoints for transactional operations .\n\n Access to and use of the API is governed by our Terms of Service.\n If you are a user of Bittrex.com, the applicable Terms of Service are available [here](https://support.bittrex.com/hc/en-us/articles/360000560871).\n If you are a user of Bittrex International, the applicable Terms of Service are available [here](https://support.bittrex.com/hc/en-us/articles/360001411486).\n\n If you have any API questions, feedback, or recommendations please post a question via our [Github page](https://github.com/Bittrex/bittrex.github.io/issues)."
  },
  "host": "api.bittrex.com",
  "basePath": "/v3",
  "schemes": ["https"],
  "paths": {
    "/account": {
      "get": {
        "tags": ["Account"],
        "description": "Retrieve information for the account associated with the request.\r\nFor now, it only echoes the subaccount if one was specified in the header,\r\nwhich can be used to verify that one is operating on the intended account.\r\nMore fields will be added later.",
        "operationId": "Account_Get",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/account"
      }
    },
    "/account/volume": {
      "get": {
        "tags": ["Account"],
        "description": "Get 30 day volume for account",
        "operationId": "Account_GetAccountVolume",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountVolume"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/addresses": {
      "get": {
        "tags": ["Addresses"],
        "description": "List deposit addresses that have been requested or provisioned.",
        "operationId": "Addresses_List",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/addresses"
      },
      "post": {
        "tags": ["Addresses"],
        "description": "Request provisioning of a deposit address for a currency for which no address has been requested or provisioned.",
        "operationId": "Addresses_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "newAddress",
          "in": "body",
          "description": "information including ID of the currency to provision a deposit address for",
          "required": true,
          "schema": {
            "$ref": "#/definitions/NewAddress"
          }
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/addresses"
      }
    },
    "/addresses/{currencySymbol}": {
      "get": {
        "tags": ["Addresses"],
        "description": "Retrieve the status of the deposit address for a particular currency for which one has been requested or provisioned.",
        "operationId": "Addresses_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "currencySymbol",
          "in": "path",
          "description": "symbol of the currency to retrieve the deposit address for",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/addresses/{currencySymbol}"
      }
    },
    "/balances": {
      "get": {
        "tags": ["Balances"],
        "description": "List account balances across available currencies.\r\nReturns a Balance entry for each currency for which there is either a balance or an address.",
        "operationId": "Balances_List",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Balance"
              }
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/balances"
      }
    },
    "/balances/{currencySymbol}": {
      "get": {
        "tags": ["Balances"],
        "description": "Retrieve account balance for a specific currency.\r\nRequest will always succeed when the currency exists, regardless of whether there is a balance or address.",
        "operationId": "Balances_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "currencySymbol",
          "in": "path",
          "description": "unique symbol of the currency to retrieve the account balance for",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Balance"
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/balances/{currencySymbol}"
      }
    },
    "/conditional-orders/{conditionalOrderId}": {
      "get": {
        "tags": ["ConditionalOrders"],
        "description": "Retrieve information on a specific conditional order.",
        "operationId": "ConditionalOrders_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "conditionalOrderId",
          "in": "path",
          "description": "_(uuid-formatted string)_ - ID of conditional order to retrieve",
          "required": true,
          "type": "string",
          "format": "uuid"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConditionalOrder"
            }
          }
        },
        "x-btx-authenticated": true
      },
      "delete": {
        "tags": ["ConditionalOrders"],
        "description": "Cancel a conditional order.",
        "operationId": "ConditionalOrders_Delete",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "conditionalOrderId",
          "in": "path",
          "description": "_(uuid-formatted string)_ - ID of order to cancel",
          "required": true,
          "type": "string",
          "format": "uuid"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConditionalOrder"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/conditional-orders/closed": {
      "get": {
        "tags": ["ConditionalOrders"],
        "description": "List closed conditional orders.\r\nStartDate and EndDate filters apply to the ClosedAt field.\r\nPagination and the sort order of the results are in inverse order of the ClosedAt field.",
        "operationId": "ConditionalOrders_ListClosed",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "marketSymbol",
          "in": "query",
          "description": "filter by market (optional)",
          "required": false,
          "type": "string"
        }, {
          "name": "nextPageToken",
          "in": "query",
          "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
          "required": false,
          "type": "string"
        }, {
          "name": "previousPageToken",
          "in": "query",
          "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
          "required": false,
          "type": "string"
        }, {
          "name": "pageSize",
          "in": "query",
          "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "startDate",
          "in": "query",
          "description": "(optional) Filters out results before this timestamp. In ISO 8601 format (e.g., \"2019-01-02T16:23:45Z\").\r\nPrecision beyond one second is not supported. Use pagination parameters for more precise filtering.",
          "required": false,
          "type": "string",
          "format": "date-time"
        }, {
          "name": "endDate",
          "in": "query",
          "description": "(optional) Filters out result after this timestamp.  Uses the same format as StartDate.\r\nEither, both, or neither of StartDate and EndDate can be set.  The only constraint on the pair is that, \r\nif both are set, then EndDate cannot be before StartDate.",
          "required": false,
          "type": "string",
          "format": "date-time"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConditionalOrder"
              }
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/conditional-orders/open": {
      "get": {
        "tags": ["ConditionalOrders"],
        "description": "List open conditional orders.",
        "operationId": "ConditionalOrders_ListOpen",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "marketSymbol",
          "in": "query",
          "description": "filter by market (optional)",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConditionalOrder"
              }
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/conditional-orders": {
      "post": {
        "tags": ["ConditionalOrders"],
        "description": "Create a new conditional order.",
        "operationId": "ConditionalOrders_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "newConditionalOrder",
          "in": "body",
          "description": "information specifying the conditional order to create",
          "required": true,
          "schema": {
            "$ref": "#/definitions/NewConditionalOrder"
          }
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ConditionalOrder"
            }
          }
        },
        "x-btx-authenticated": true
      }
    },
    "/currencies": {
      "get": {
        "tags": ["Currencies"],
        "description": "List currencies.",
        "operationId": "Currencies_List",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Currency"
              }
            }
          }
        },
        "x-btx-request-example": "https://api.bittrex.com/v3/currencies"
      }
    },
    "/currencies/{symbol}": {
      "get": {
        "tags": ["Currencies"],
        "description": "Retrieve info on a specified currency.",
        "operationId": "Currencies_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "symbol",
          "in": "path",
          "description": "symbol of the currency to retrieve",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          }
        },
        "x-btx-request-example": "https://api.bittrex.com/v3/currencies/{symbol}"
      }
    },
    "/deposits/open": {
      "get": {
        "tags": ["Deposits"],
        "description": "List open deposits. Results are sorted in inverse order of UpdatedAt, and are limited to the first 1000.",
        "operationId": "Deposits_ListOpen",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "status",
          "in": "query",
          "description": "filter by an open deposit status (optional)",
          "required": false,
          "type": "string",
          "enum": ["PENDING"]
        }, {
          "name": "currencySymbol",
          "in": "query",
          "description": "filter by currency (optional)",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deposit"
              }
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/deposits/open"
      }
    },
    "/deposits/closed": {
      "get": {
        "tags": ["Deposits"],
        "description": "List closed deposits. StartDate and EndDate filters apply to the CompletedAt field.\r\nPagination and the sort order of the results are in inverse order of the CompletedAt field.",
        "operationId": "Deposits_ListClosed",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "status",
          "in": "query",
          "description": "filter by deposit status (optional)",
          "required": false,
          "type": "string",
          "enum": ["COMPLETED", "ORPHANED", "INVALIDATED"]
        }, {
          "name": "currencySymbol",
          "in": "query",
          "description": "filter by currency (optional)",
          "required": false,
          "type": "string"
        }, {
          "name": "nextPageToken",
          "in": "query",
          "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
          "required": false,
          "type": "string"
        }, {
          "name": "previousPageToken",
          "in": "query",
          "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
          "required": false,
          "type": "string"
        }, {
          "name": "pageSize",
          "in": "query",
          "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "startDate",
          "in": "query",
          "description": "(optional) Filters out results before this timestamp. In ISO 8601 format (e.g., \"2019-01-02T16:23:45Z\").\r\nPrecision beyond one second is not supported. Use pagination parameters for more precise filtering.",
          "required": false,
          "type": "string",
          "format": "date-time"
        }, {
          "name": "endDate",
          "in": "query",
          "description": "(optional) Filters out result after this timestamp.  Uses the same format as StartDate.\r\nEither, both, or neither of StartDate and EndDate can be set.  The only constraint on the pair is that, \r\nif both are set, then EndDate cannot be before StartDate.",
          "required": false,
          "type": "string",
          "format": "date-time"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deposit"
              }
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/deposits/closed"
      }
    },
    "/deposits/ByTxId/{txId}": {
      "get": {
        "tags": ["Deposits"],
        "description": "Retrieves all deposits for this account with the given TxId",
        "operationId": "Deposits_ListByTxId",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "txId",
          "in": "path",
          "description": "the transaction id to lookup",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deposit"
              }
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/deposits/ByTxId/{txId}"
      }
    },
    "/deposits/{depositId}": {
      "get": {
        "tags": ["Deposits"],
        "description": "Retrieve information for a specific deposit.",
        "operationId": "Deposits_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "depositId",
          "in": "path",
          "description": "_(uuid-formatted string)_ - ID of the deposit to retrieve",
          "required": true,
          "type": "string",
          "format": "uuid"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Deposit"
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/deposits/{depositId}"
      }
    },
    "/markets": {
      "get": {
        "tags": ["Markets"],
        "description": "List markets.",
        "operationId": "Markets_List",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Market"
              }
            }
          }
        },
        "x-btx-request-example": "https://api.bittrex.com/v3/markets"
      }
    },
    "/markets/summaries": {
      "get": {
        "tags": ["Markets"],
        "description": "List summaries of the last 24 hours of activity for all markets.\r\n** Note: baseVolume is being deprecated and will be removed in favor of quoteVolume",
        "operationId": "Markets_ListSummaries",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MarketSummary"
              }
            }
          }
        },
        "x-btx-request-example": "https://api.bittrex.com/v3/markets/summaries"
      }
    },
    "/markets/tickers": {
      "get": {
        "tags": ["Markets"],
        "description": "List tickers for all markets.",
        "operationId": "Markets_ListTickers",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ticker"
              }
            }
          }
        },
        "x-btx-request-example": "https://api.bittrex.com/v3/markets/tickers"
      }
    },
    "/markets/{marketSymbol}": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve information for a specific market.",
        "operationId": "Markets_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "marketSymbol",
          "in": "path",
          "description": "symbol of market to retrieve",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Market"
            }
          }
        },
        "x-btx-request-example": "https://api.bittrex.com/v3/markets/{marketSymbol}"
      }
    },
    "/markets/{marketSymbol}/summary": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve summary of the last 24 hours of activity for a specific market.\r\n** Note: baseVolume is being deprecated and will be removed in favor of quoteVolume",
        "operationId": "Markets_GetSummary",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "marketSymbol",
          "in": "path",
          "description": "symbol of market to retrieve summary for",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MarketSummary"
            }
          }
        },
        "x-btx-request-example": "https://api.bittrex.com/v3/markets/{marketSymbol}/summary"
      }
    },
    "/markets/{marketSymbol}/orderbook": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve the order book for a specific market.",
        "operationId": "Markets_GetOrderBook",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "marketSymbol",
          "in": "path",
          "description": "symbol of market to retrieve order book for",
          "required": true,
          "type": "string"
        }, {
          "name": "depth",
          "in": "query",
          "description": "maximum depth of order book to return (optional, allowed values are [1, 25, 500], default is 25)",
          "required": false,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderBook"
            }
          }
        },
        "x-btx-request-example": "https://api.bittrex.com/v3/markets/{marketSymbol}/orderbook"
      }
    },
    "/markets/{marketSymbol}/trades": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve the recent trades for a specific market.",
        "operationId": "Markets_GetTrades",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "marketSymbol",
          "in": "path",
          "description": "symbol of market to retrieve recent trades for",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trade"
              }
            }
          }
        },
        "x-btx-request-example": "https://api.bittrex.com/v3/markets/{marketSymbol}/trades"
      }
    },
    "/markets/{marketSymbol}/ticker": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve the ticker for a specific market.",
        "operationId": "Markets_GetTicker",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "marketSymbol",
          "in": "path",
          "description": "symbol of market to retrieve ticker for",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Ticker"
            }
          }
        },
        "x-btx-request-example": "https://api.bittrex.com/v3/markets/{marketSymbol}/ticker"
      }
    },
    "/markets/{marketSymbol}/candles": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve recent candles for a specific market.  NOTE: This call has been deprecated in favor of candles/recent",
        "operationId": "Markets_GetCandlesDeprecated",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "marketSymbol",
          "in": "path",
          "description": "symbol of market to retrieve candles for",
          "required": true,
          "type": "string"
        }, {
          "name": "candleInterval",
          "in": "query",
          "description": "desired time interval between candles",
          "required": true,
          "type": "string",
          "enum": ["MINUTE_1", "MINUTE_5", "HOUR_1", "DAY_1"]
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Candle"
              }
            }
          }
        },
        "x-btx-request-example": "https://api.bittrex.com/v3/markets/{marketSymbol}/candles"
      }
    },
    "/markets/{marketSymbol}/candles/{candleInterval}/recent": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve recent candles for a specific market and candle interval.\r\nThe maximum age of the returned candles depends on the interval as follows:\r\n(MINUTE_1: 1 day, MINUTE_5: 1 day, HOUR_1: 31 days, DAY_1: 366 days).\r\nCandles for intervals without any trading activity are omitted.\r\n** Note: baseVolume is being deprecated and will be removed in favor of quoteVolume",
        "operationId": "Markets_GetCandlesRecent",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "marketSymbol",
          "in": "path",
          "description": "symbol of market to retrieve candles for",
          "required": true,
          "type": "string"
        }, {
          "name": "candleInterval",
          "in": "path",
          "description": "desired time interval between candles",
          "required": true,
          "type": "string",
          "enum": ["MINUTE_1", "MINUTE_5", "HOUR_1", "DAY_1"]
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Candle"
              }
            }
          }
        }
      }
    },
    "/markets/{marketSymbol}/candles/{candleInterval}/historical/{year}/{month}/{day}": {
      "get": {
        "tags": ["Markets"],
        "description": "Retrieve recent candles for a specific market and candle interval.\r\nThe date range of returned candles depends on the interval as follows:\r\n(MINUTE_1: 1 day, MINUTE_5: 1 day, HOUR_1: 31 days, DAY_1: 366 days).\r\nCandles for intervals without any trading activity are omitted.\r\n** Note: baseVolume is being deprecated and will be removed in favor of quoteVolume",
        "operationId": "Markets_GetCandlesHistorical",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "marketSymbol",
          "in": "path",
          "description": "symbol of market to retrieve candles for",
          "required": true,
          "type": "string"
        }, {
          "name": "candleInterval",
          "in": "path",
          "description": "desired time interval between candles",
          "required": true,
          "type": "string",
          "enum": ["MINUTE_1", "MINUTE_5", "HOUR_1", "DAY_1"]
        }, {
          "name": "year",
          "in": "path",
          "description": "desired year to start from",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "month",
          "in": "path",
          "description": "desired month to start from (if applicable)",
          "required": true,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "day",
          "in": "path",
          "description": "desired day to start from (if applicable)",
          "required": true,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Candle"
              }
            }
          }
        }
      }
    },
    "/orders/closed": {
      "get": {
        "tags": ["Orders"],
        "description": "List closed orders.  \r\nStartDate and EndDate filters apply to the ClosedAt field.\r\nPagination and the sort order of the results are in inverse order of the ClosedAt field.",
        "operationId": "Orders_ListClosed",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "marketSymbol",
          "in": "query",
          "description": "filter by market (optional)",
          "required": false,
          "type": "string"
        }, {
          "name": "nextPageToken",
          "in": "query",
          "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
          "required": false,
          "type": "string"
        }, {
          "name": "previousPageToken",
          "in": "query",
          "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
          "required": false,
          "type": "string"
        }, {
          "name": "pageSize",
          "in": "query",
          "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "startDate",
          "in": "query",
          "description": "(optional) Filters out results before this timestamp. In ISO 8601 format (e.g., \"2019-01-02T16:23:45Z\").\r\nPrecision beyond one second is not supported. Use pagination parameters for more precise filtering.",
          "required": false,
          "type": "string",
          "format": "date-time"
        }, {
          "name": "endDate",
          "in": "query",
          "description": "(optional) Filters out result after this timestamp.  Uses the same format as StartDate.\r\nEither, both, or neither of StartDate and EndDate can be set.  The only constraint on the pair is that, \r\nif both are set, then EndDate cannot be before StartDate.",
          "required": false,
          "type": "string",
          "format": "date-time"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/orders/closed"
      }
    },
    "/orders/open": {
      "get": {
        "tags": ["Orders"],
        "description": "List open orders.",
        "operationId": "Orders_ListOpen",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "marketSymbol",
          "in": "query",
          "description": "filter by market (optional)",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/orders/open"
      }
    },
    "/orders/{orderId}": {
      "get": {
        "tags": ["Orders"],
        "description": "Retrieve information on a specific order.",
        "operationId": "Orders_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "orderId",
          "in": "path",
          "description": "_(uuid-formatted string)_ - ID of order to retrieve",
          "required": true,
          "type": "string",
          "format": "uuid"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/orders/{orderId}"
      },
      "delete": {
        "tags": ["Orders"],
        "description": "Cancel an order.",
        "operationId": "Orders_Delete",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "orderId",
          "in": "path",
          "description": "_(uuid-formatted string)_ - ID of order to cancel",
          "required": true,
          "type": "string",
          "format": "uuid"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/orders/{orderId}"
      }
    },
    "/orders": {
      "post": {
        "tags": ["Orders"],
        "description": "Create a new order.",
        "operationId": "Orders_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "newOrder",
          "in": "body",
          "description": "information specifying the order to create",
          "required": true,
          "schema": {
            "$ref": "#/definitions/NewOrder"
          }
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/orders"
      }
    },
    "/ping": {
      "get": {
        "tags": ["Ping"],
        "description": "Pings the service",
        "operationId": "Ping_Get",
        "consumes": [],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ServicePing"
            }
          }
        },
        "x-btx-request-example": "https://api.bittrex.com/v3/ping"
      }
    },
    "/subaccounts": {
      "get": {
        "tags": ["Subaccounts"],
        "description": "List subaccounts. _(NOTE: This API is limited to partners and not available for traders.)_\r\nPagination and the sort order of the results are in inverse order of the CreatedAt field.",
        "operationId": "Subaccounts_List",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "nextPageToken",
          "in": "query",
          "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
          "required": false,
          "type": "string"
        }, {
          "name": "previousPageToken",
          "in": "query",
          "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
          "required": false,
          "type": "string"
        }, {
          "name": "pageSize",
          "in": "query",
          "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
          "required": false,
          "type": "integer",
          "format": "int32"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subaccount"
              }
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/subaccounts"
      },
      "post": {
        "tags": ["Subaccounts"],
        "description": "Create a new subaccount. _(NOTE: This API is limited to partners and not available for traders.)_",
        "operationId": "Subaccounts_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "newSubaccount",
          "in": "body",
          "description": "information specifying the subaccount to create",
          "required": true,
          "schema": {
            "$ref": "#/definitions/NewSubaccount"
          }
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/subaccounts"
      }
    },
    "/subaccounts/{subaccountId}": {
      "get": {
        "tags": ["Subaccounts"],
        "description": "Retrieve details for a specified subaccount. _(NOTE: This API is limited to partners and not available for traders.)_",
        "operationId": "Subaccounts_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "subaccountId",
          "in": "path",
          "description": "_(uuid-formatted string)_ - ID of the subaccount to retrieve details for",
          "required": true,
          "type": "string",
          "format": "uuid"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/subaccounts/{subaccountId}"
      }
    },
    "/transfers/sent": {
      "get": {
        "tags": ["Transfers"],
        "description": "List sent transfers.(NOTE: This API is limited to partners and not available for traders.)\r\nPagination and the sort order of the results are in inverse order of the Executed field.",
        "operationId": "Transfers_ListSent",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "toSubaccountId",
          "in": "query",
          "description": "_(uuid-formatted string)_ - filter transfers to a sub account id (optional)",
          "required": false,
          "type": "string",
          "format": "uuid"
        }, {
          "name": "toMasterAccount",
          "in": "query",
          "description": "filter transfers to master account (optional)",
          "required": false,
          "type": "boolean"
        }, {
          "name": "currencySymbol",
          "in": "query",
          "description": "filter by currency (optional)",
          "required": false,
          "type": "string"
        }, {
          "name": "nextPageToken",
          "in": "query",
          "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
          "required": false,
          "type": "string"
        }, {
          "name": "previousPageToken",
          "in": "query",
          "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
          "required": false,
          "type": "string"
        }, {
          "name": "pageSize",
          "in": "query",
          "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "startDate",
          "in": "query",
          "description": "(optional) Filters out results before this timestamp. In ISO 8601 format (e.g., \"2019-01-02T16:23:45Z\").\r\nPrecision beyond one second is not supported. Use pagination parameters for more precise filtering.",
          "required": false,
          "type": "string",
          "format": "date-time"
        }, {
          "name": "endDate",
          "in": "query",
          "description": "(optional) Filters out result after this timestamp.  Uses the same format as StartDate.\r\nEither, both, or neither of StartDate and EndDate can be set.  The only constraint on the pair is that, \r\nif both are set, then EndDate cannot be before StartDate.",
          "required": false,
          "type": "string",
          "format": "date-time"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SentTransferInfo"
              }
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/transfers/sent"
      }
    },
    "/transfers/received": {
      "get": {
        "tags": ["Transfers"],
        "description": "List received transfers.(NOTE: This API is limited to partners and not available for traders.)\r\nPagination and the sort order of the results are in inverse order of the Executed field.",
        "operationId": "Transfers_ListReceived",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "fromSubaccountId",
          "in": "query",
          "description": "_(uuid-formatted string)_ - filter transfers from a sub account id (optional)",
          "required": false,
          "type": "string",
          "format": "uuid"
        }, {
          "name": "fromMasterAccount",
          "in": "query",
          "description": "filter transfers from master account (optional)",
          "required": false,
          "type": "boolean"
        }, {
          "name": "currencySymbol",
          "in": "query",
          "description": "filter by currency (optional)",
          "required": false,
          "type": "string"
        }, {
          "name": "nextPageToken",
          "in": "query",
          "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
          "required": false,
          "type": "string"
        }, {
          "name": "previousPageToken",
          "in": "query",
          "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
          "required": false,
          "type": "string"
        }, {
          "name": "pageSize",
          "in": "query",
          "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "startDate",
          "in": "query",
          "description": "(optional) Filters out results before this timestamp. In ISO 8601 format (e.g., \"2019-01-02T16:23:45Z\").\r\nPrecision beyond one second is not supported. Use pagination parameters for more precise filtering.",
          "required": false,
          "type": "string",
          "format": "date-time"
        }, {
          "name": "endDate",
          "in": "query",
          "description": "(optional) Filters out result after this timestamp.  Uses the same format as StartDate.\r\nEither, both, or neither of StartDate and EndDate can be set.  The only constraint on the pair is that, \r\nif both are set, then EndDate cannot be before StartDate.",
          "required": false,
          "type": "string",
          "format": "date-time"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReceivedTransferInfo"
              }
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/transfers/received"
      }
    },
    "/transfers/{transferId}": {
      "get": {
        "tags": ["Transfers"],
        "description": "Retrieve information on the specified transfer.(NOTE: This API is limited to partners and not available for traders.)",
        "operationId": "Transfers_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "transferId",
          "in": "path",
          "description": "_(uuid-formatted string)_ - ID of the transfer to retrieve",
          "required": true,
          "type": "string",
          "format": "uuid"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReceivedTransferInfo"
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/transfers/{transferId}"
      }
    },
    "/transfers": {
      "post": {
        "tags": ["Transfers"],
        "description": "Executes a new transfer.(NOTE: This API is limited to partners and not available for traders.)",
        "operationId": "Transfers_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "newTransfer",
          "in": "body",
          "description": "information specifying the transfer to execute",
          "required": true,
          "schema": {
            "$ref": "#/definitions/NewTransfer"
          }
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NewTransfer"
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/transfers"
      }
    },
    "/withdrawals/open": {
      "get": {
        "tags": ["Withdrawals"],
        "description": "List open withdrawals.  Results are sorted in inverse order of the CreatedAt field, and are limited to the first 1000.",
        "operationId": "Withdrawals_ListOpen",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "status",
          "in": "query",
          "description": "filter by an open withdrawal status (optional)",
          "required": false,
          "type": "string",
          "enum": ["REQUESTED", "AUTHORIZED", "PENDING", "ERROR_INVALID_ADDRESS"]
        }, {
          "name": "currencySymbol",
          "in": "query",
          "description": "filter by currency (optional)",
          "required": false,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Withdrawal"
              }
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/withdrawals/open"
      }
    },
    "/withdrawals/closed": {
      "get": {
        "tags": ["Withdrawals"],
        "description": "List closed withdrawals.  StartDate and EndDate filters apply to the CompletedAt field.\r\nPagination and the sort order of the results are in inverse order of the CompletedAt field.",
        "operationId": "Withdrawals_ListClosed",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "status",
          "in": "query",
          "description": "filter by withdrawal status (optional)",
          "required": false,
          "type": "string",
          "enum": ["COMPLETED", "CANCELLED"]
        }, {
          "name": "currencySymbol",
          "in": "query",
          "description": "filter by currency (optional)",
          "required": false,
          "type": "string"
        }, {
          "name": "nextPageToken",
          "in": "query",
          "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
          "required": false,
          "type": "string"
        }, {
          "name": "previousPageToken",
          "in": "query",
          "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
          "required": false,
          "type": "string"
        }, {
          "name": "pageSize",
          "in": "query",
          "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "startDate",
          "in": "query",
          "description": "(optional) Filters out results before this timestamp. In ISO 8601 format (e.g., \"2019-01-02T16:23:45Z\").\r\nPrecision beyond one second is not supported. Use pagination parameters for more precise filtering.",
          "required": false,
          "type": "string",
          "format": "date-time"
        }, {
          "name": "endDate",
          "in": "query",
          "description": "(optional) Filters out result after this timestamp.  Uses the same format as StartDate.\r\nEither, both, or neither of StartDate and EndDate can be set.  The only constraint on the pair is that, \r\nif both are set, then EndDate cannot be before StartDate.",
          "required": false,
          "type": "string",
          "format": "date-time"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Withdrawal"
              }
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/withdrawals/closed"
      }
    },
    "/withdrawals/ByTxId/{txId}": {
      "get": {
        "tags": ["Withdrawals"],
        "description": "Retrieves all withdrawals for this account with the given TxId",
        "operationId": "Withdrawals_ListByTxId",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "txId",
          "in": "path",
          "description": "the transaction id to lookup",
          "required": true,
          "type": "string"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Withdrawal"
              }
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/withdrawals/ByTxId/{txId}"
      }
    },
    "/withdrawals/{withdrawalId}": {
      "get": {
        "tags": ["Withdrawals"],
        "description": "Retrieve information on a specified withdrawal.",
        "operationId": "Withdrawals_Get",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "withdrawalId",
          "in": "path",
          "description": "_(uuid-formatted string)_ - ID of withdrawal to retrieve",
          "required": true,
          "type": "string",
          "format": "uuid"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/withdrawals/{withdrawalId}"
      },
      "delete": {
        "tags": ["Withdrawals"],
        "description": "Cancel a withdrawal. (Withdrawals can only be cancelled if status is REQUESTED, AUTHORIZED, or ERROR_INVALID_ADDRESS.)",
        "operationId": "Withdrawals_Delete",
        "consumes": [],
        "produces": ["application/json"],
        "parameters": [{
          "name": "withdrawalId",
          "in": "path",
          "description": "_(uuid-formatted string)_ - ID of withdrawal to cancel",
          "required": true,
          "type": "string",
          "format": "uuid"
        }],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/withdrawals/{withdrawalId}"
      }
    },
    "/withdrawals": {
      "post": {
        "tags": ["Withdrawals"],
        "description": "Create a new withdrawal.",
        "operationId": "Withdrawals_Create",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [{
          "name": "newWithdrawal",
          "in": "body",
          "description": "information specifying the withdrawal to create",
          "required": true,
          "schema": {
            "$ref": "#/definitions/NewWithdrawal"
          }
        }],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        },
        "x-btx-authenticated": true,
        "x-btx-request-example": "https://api.bittrex.com/v3/withdrawals"
      }
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "properties": {
        "subaccountId": {
          "format": "uuid",
          "description": "the subaccount ID associated with this request if one was specified in the header (optional)",
          "type": "string"
        }
      }
    },
    "AccountVolume": {
      "type": "object",
      "properties": {
        "updated": {
          "format": "date-time",
          "description": "Date and time indicating as when volume was updated",
          "type": "string"
        },
        "volume30days": {
          "format": "double",
          "description": "30 day volume information.",
          "type": "number"
        }
      }
    },
    "Address": {
      "required": ["status", "currencySymbol"],
      "type": "object",
      "properties": {
        "status": {
          "description": "the status of this deposit address",
          "enum": ["REQUESTED", "PROVISIONED"],
          "type": "string"
        },
        "currencySymbol": {
          "description": "the unique ID of the currency this deposit address is for",
          "type": "string"
        },
        "cryptoAddress": {
          "description": "the cryptographic deposit address (optional, only set if Status is PROVISIONED)",
          "type": "string"
        },
        "cryptoAddressTag": {
          "description": "the cryptographic deposit address tag (optional, only set if Status is PROVISIONED)\r\nNOTE: This only applies for currencies whose coinType requires it.",
          "type": "string"
        }
      }
    },
    "NewAddress": {
      "required": ["currencySymbol"],
      "type": "object",
      "properties": {
        "currencySymbol": {
          "description": "the currency ID to provision a new address for",
          "type": "string"
        }
      }
    },
    "Balance": {
      "required": ["currencySymbol", "total", "available"],
      "type": "object",
      "properties": {
        "currencySymbol": {
          "description": "unique ID for the currency this balance is associated with",
          "type": "string"
        },
        "total": {
          "format": "double",
          "description": "total amount",
          "type": "number"
        },
        "available": {
          "format": "double",
          "description": "available amount",
          "type": "number"
        }
      }
    },
    "ConditionalOrder": {
      "required": ["id", "marketSymbol", "operand", "status", "createdAt"],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "unique ID of this order, assigned by the service\r\nNote that this ID is completely unrelated to the optional clientConditionalOrderId.",
          "type": "string"
        },
        "marketSymbol": {
          "description": "unique symbol of the market this conditional order will be tracking",
          "type": "string"
        },
        "operand": {
          "description": "price above (GTE) or below (LTE) which the conditional order will trigger\r\nThis value will be set automatically if trailingStopPercent is specified.\r\n(either this or trailingStopPercent must be specified)",
          "enum": ["LTE", "GTE"],
          "type": "string"
        },
        "triggerPrice": {
          "format": "double",
          "description": "percent above the minimum price (GTE) or below the maximum price (LTE) at which to trigger\r\n(either this or triggerPrice must be specified)",
          "type": "number"
        },
        "trailingStopPercent": {
          "format": "double",
          "description": "The stop price will automatically adjust relative to the most extreme trade value seen.\r\n(either this or trigger price must be specified)",
          "type": "number"
        },
        "createdOrderId": {
          "format": "uuid",
          "description": "unique ID of the order that was created by this conditional, if there is one",
          "type": "string"
        },
        "orderToCreate": {
          "$ref": "#/definitions/NewOrder",
          "description": "order to create if this conditional order is triggered"
        },
        "orderToCancel": {
          "$ref": "#/definitions/NewCancelConditionalOrder",
          "description": "order or conditional order to cancel if this conditional order triggers\r\nNote that this relationship is reciprocal."
        },
        "clientConditionalOrderId": {
          "format": "uuid",
          "description": "client-provided identifier for idempotency (optional)",
          "type": "string"
        },
        "status": {
          "description": "conditional order status",
          "enum": ["OPEN", "COMPLETED", "CANCELLED", "FAILED"],
          "type": "string"
        },
        "orderCreationErrorCode": {
          "description": "if a conditional order fails to create an order when triggered, the failure reason will appear here",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "timestamp (UTC) of order creation (always present)",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "description": "timestamp (UTC) of last order update (optional)",
          "type": "string"
        },
        "closedAt": {
          "format": "date-time",
          "description": "timestamp (UTC) when this order was closed (optional)",
          "type": "string"
        }
      }
    },
    "NewOrder": {
      "required": ["marketSymbol", "direction", "type", "timeInForce"],
      "type": "object",
      "properties": {
        "marketSymbol": {
          "description": "unique symbol of the market this order is being placed on",
          "type": "string"
        },
        "direction": {
          "description": "order direction",
          "enum": ["BUY", "SELL"],
          "type": "string"
        },
        "type": {
          "description": "order type",
          "enum": ["LIMIT", "MARKET", "CEILING_LIMIT", "CEILING_MARKET"],
          "type": "string"
        },
        "quantity": {
          "format": "double",
          "description": "quantity (optional, must be included for non-ceiling orders and excluded for ceiling orders)",
          "type": "number"
        },
        "ceiling": {
          "format": "double",
          "description": "ceiling (optional, must be included for ceiling orders and excluded for non-ceiling orders)",
          "type": "number"
        },
        "limit": {
          "format": "double",
          "description": "limit (optional, must be included for LIMIT orders and excluded for MARKET orders)",
          "type": "number"
        },
        "timeInForce": {
          "description": "time in force",
          "enum": ["GOOD_TIL_CANCELLED", "IMMEDIATE_OR_CANCEL", "FILL_OR_KILL", "POST_ONLY_GOOD_TIL_CANCELLED"],
          "type": "string"
        },
        "clientOrderId": {
          "format": "uuid",
          "description": "client-provided identifier for advanced order tracking (optional)",
          "type": "string"
        },
        "useAwards": {
          "description": "option to use Bittrex credits for the order (optional)",
          "type": "boolean"
        }
      }
    },
    "NewCancelConditionalOrder": {
      "required": ["type"],
      "type": "object",
      "properties": {
        "type": {
          "description": "type of order to cancel",
          "enum": ["ORDER", "CONDITIONAL_ORDER"],
          "type": "string"
        },
        "id": {
          "format": "uuid",
          "description": "uuid of the order or conditional order to cancel",
          "type": "string"
        }
      }
    },
    "PaginationParameters": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the forward direction.\r\n(Optional. May only be specified if PreviousPageToken is not specified.)",
          "type": "string"
        },
        "previousPageToken": {
          "description": "The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint.\r\nUsed for traversing a paginated set in the reverse direction.\r\n(Optional. May only be specified if NextPageToken is not specified.)",
          "type": "string"
        },
        "pageSize": {
          "format": "int32",
          "description": "maximum number of items to retrieve -- default 100, minimum 1, maximum 200 (optional)",
          "type": "integer"
        }
      }
    },
    "DateFilter": {
      "type": "object",
      "properties": {
        "startDate": {
          "format": "date-time",
          "description": "(optional) Filters out results before this timestamp. In ISO 8601 format (e.g., \"2019-01-02T16:23:45Z\").\r\nPrecision beyond one second is not supported. Use pagination parameters for more precise filtering.",
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "description": "(optional) Filters out result after this timestamp.  Uses the same format as StartDate.\r\nEither, both, or neither of StartDate and EndDate can be set.  The only constraint on the pair is that, \r\nif both are set, then EndDate cannot be before StartDate.",
          "type": "string"
        }
      }
    },
    "NewConditionalOrder": {
      "required": ["marketSymbol", "operand"],
      "type": "object",
      "properties": {
        "marketSymbol": {
          "description": "unique symbol of the market this conditional order will be tracking",
          "type": "string"
        },
        "operand": {
          "description": "price above (GTE) or below (LTE) which the conditional order will trigger\r\nThis value will be set automatically if trailingStopPercent is specified.\r\n(either this or trailingStopPercent must be specified)",
          "enum": ["LTE", "GTE"],
          "type": "string"
        },
        "triggerPrice": {
          "format": "double",
          "description": "percent above the minimum price (GTE) or below the maximum price (LTE) at which to trigger\r\n(either this or triggerPrice must be specified)",
          "type": "number"
        },
        "trailingStopPercent": {
          "format": "double",
          "description": "The stop price will automatically adjust relative to the most extreme trade value seen.\r\n(either this or trigger price must be specified)",
          "type": "number"
        },
        "orderToCreate": {
          "$ref": "#/definitions/NewOrder",
          "description": "order to create if this conditional order is triggered"
        },
        "orderToCancel": {
          "$ref": "#/definitions/NewCancelConditionalOrder",
          "description": "order or conditional order to cancel if this conditional order triggers\r\nNote that this relationship is reciprocal."
        },
        "clientConditionalOrderId": {
          "format": "uuid",
          "description": "client-provided identifier for idempotency (optional)",
          "type": "string"
        }
      }
    },
    "Currency": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "unique symbol for this currency",
          "type": "string"
        },
        "name": {
          "description": "long name of this currency",
          "type": "string"
        },
        "coinType": {
          "description": "coin type of this currency",
          "type": "string"
        },
        "status": {
          "description": "currency status (online, offline, etc.)",
          "enum": ["ONLINE", "OFFLINE"],
          "type": "string"
        },
        "minConfirmations": {
          "format": "int32",
          "description": "minimum number of confirmations",
          "type": "integer"
        },
        "notice": {
          "description": "news or alerts regarding this currency",
          "type": "string"
        },
        "txFee": {
          "format": "double",
          "description": "transaction fee for this currency",
          "type": "number"
        },
        "logoUrl": {
          "description": "url to the logo image for this currency, if available",
          "type": "string"
        }
      }
    },
    "Deposit": {
      "required": ["id", "currencySymbol", "quantity", "cryptoAddress", "confirmations", "updatedAt", "status"],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "unique ID for this deposit, assigned by the service",
          "type": "string"
        },
        "currencySymbol": {
          "description": "unique symbol of the currency being deposited to",
          "type": "string"
        },
        "quantity": {
          "format": "double",
          "description": "quantity to deposit",
          "type": "number"
        },
        "cryptoAddress": {
          "description": "crypto address for this deposit",
          "type": "string"
        },
        "cryptoAddressTag": {
          "description": "crypto address tag for this deposit (optional, depends on the coin type of currency being deposited)",
          "type": "string"
        },
        "txId": {
          "description": "TxID for the deposit (optional)",
          "type": "string"
        },
        "confirmations": {
          "format": "int32",
          "description": "current count of confirmations",
          "type": "integer"
        },
        "updatedAt": {
          "format": "date-time",
          "description": "time stamp when this deposit was last updated",
          "type": "string"
        },
        "completedAt": {
          "format": "date-time",
          "description": "time stamp when this deposit was completed (optional, only set when status is COMPLETED)",
          "type": "string"
        },
        "status": {
          "description": "current status of this deposit",
          "enum": ["PENDING", "COMPLETED", "ORPHANED", "INVALIDATED"],
          "type": "string"
        }
      }
    },
    "Market": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "unique symbol for this market",
          "type": "string"
        },
        "baseCurrencySymbol": {
          "description": "unique symbol for base currency",
          "type": "string"
        },
        "quoteCurrencySymbol": {
          "description": "unique symbol for quote currency",
          "type": "string"
        },
        "minTradeSize": {
          "format": "double",
          "description": "minimum trade size",
          "type": "number"
        },
        "precision": {
          "format": "int32",
          "description": "maximum allowed precision for the limit price on an order",
          "type": "integer"
        },
        "status": {
          "description": "true if this market is currently active",
          "enum": ["ONLINE", "OFFLINE"],
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "timestamp in UTC when this market was created",
          "type": "string"
        },
        "notice": {
          "description": "notice or alert info",
          "type": "string"
        }
      }
    },
    "MarketSummary": {
      "required": ["symbol", "high", "low", "volume", "quoteVolume", "percentChange", "updatedAt"],
      "type": "object",
      "properties": {
        "symbol": {
          "description": "unique symbol for this market",
          "type": "string"
        },
        "high": {
          "format": "double",
          "description": "highest price of a trade that occurred within the last 24 hours\r\n(or zero if there were no trades)",
          "type": "number"
        },
        "low": {
          "format": "double",
          "description": "lowest price of a trade that occurred within the last 24 hours\r\n(or zero if there were no trades)",
          "type": "number"
        },
        "volume": {
          "format": "double",
          "description": "volume within the last 24 hours",
          "type": "number"
        },
        "baseVolume": {
          "format": "double",
          "description": "base volume within the last 24 hours\r\n** Note: This field is being deprecated and will be removed in favor of quoteVolume",
          "type": "number"
        },
        "quoteVolume": {
          "format": "double",
          "description": "quote volume within the last 24 hours",
          "type": "number"
        },
        "percentChange": {
          "format": "double",
          "description": "percentage change of the exchange rate over the last 24 hours (positive or negative)",
          "type": "number"
        },
        "updatedAt": {
          "format": "date-time",
          "description": "timestamp in UTC when market summary was last updated",
          "type": "string"
        }
      }
    },
    "Ticker": {
      "required": ["lastTradeRate", "bidRate", "askRate"],
      "type": "object",
      "properties": {
        "symbol": {
          "description": "unique symbol for this market",
          "type": "string"
        },
        "lastTradeRate": {
          "format": "double",
          "description": "price of the last trade\r\n(or zero if there were no trades)",
          "type": "number"
        },
        "bidRate": {
          "format": "double",
          "description": "rate of the current best bid\r\n(or zero if there are no bids)",
          "type": "number"
        },
        "askRate": {
          "format": "double",
          "description": "rate of the current best ask\r\n(or zero if there are no asks)",
          "type": "number"
        }
      }
    },
    "OrderBook": {
      "required": ["bid", "ask"],
      "type": "object",
      "properties": {
        "bid": {
          "description": "buy entries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderBookEntry"
          }
        },
        "ask": {
          "description": "sell entries",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderBookEntry"
          }
        }
      }
    },
    "OrderBookEntry": {
      "required": ["quantity", "rate"],
      "type": "object",
      "properties": {
        "quantity": {
          "format": "double",
          "description": "quantity",
          "type": "number"
        },
        "rate": {
          "format": "double",
          "description": "rate",
          "type": "number"
        }
      }
    },
    "Trade": {
      "required": ["id", "executedAt", "quantity", "rate", "takerSide"],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "unique ID of this trade, assigned by the service (always present)",
          "type": "string"
        },
        "executedAt": {
          "format": "date-time",
          "description": "timestamp in UTC when order was filled",
          "type": "string"
        },
        "quantity": {
          "format": "double",
          "description": "quantity",
          "type": "number"
        },
        "rate": {
          "format": "double",
          "description": "rate",
          "type": "number"
        },
        "takerSide": {
          "description": "taker side (specifies whether the taker was the buy or sellside)",
          "enum": ["BUY", "SELL"],
          "type": "string"
        }
      }
    },
    "Candle": {
      "required": ["startsAt", "open", "high", "low", "close", "volume", "quoteVolume"],
      "type": "object",
      "properties": {
        "startsAt": {
          "format": "date-time",
          "description": "time stamp in UTC for when this candle's time interval starts",
          "type": "string"
        },
        "open": {
          "format": "double",
          "description": "open",
          "type": "number"
        },
        "high": {
          "format": "double",
          "description": "high",
          "type": "number"
        },
        "low": {
          "format": "double",
          "description": "low",
          "type": "number"
        },
        "close": {
          "format": "double",
          "description": "close",
          "type": "number"
        },
        "volume": {
          "format": "double",
          "description": "volume",
          "type": "number"
        },
        "baseVolume": {
          "format": "double",
          "description": "base volume\r\n** Note: This field is being deprecated and will be removed in favor of quoteVolume",
          "type": "number"
        },
        "quoteVolume": {
          "format": "double",
          "description": "quoute volume",
          "type": "number"
        }
      }
    },
    "Order": {
      "required": ["id", "marketSymbol", "direction", "type", "timeInForce", "fillQuantity", "commission", "proceeds", "status", "createdAt"],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "unique ID of this order, assigned by the service (always present)\r\nNote that this ID is completely unrelated to the optional ClientOrderId.",
          "type": "string"
        },
        "marketSymbol": {
          "description": "unique symbol of the market this order is being placed on (always present, matches the field in NewOrder)",
          "type": "string"
        },
        "direction": {
          "description": "order direction (always present, matches the field in NewOrder)",
          "enum": ["BUY", "SELL"],
          "type": "string"
        },
        "type": {
          "description": "order type (always present, matches the field in NewOrder)",
          "enum": ["LIMIT", "MARKET", "CEILING_LIMIT", "CEILING_MARKET"],
          "type": "string"
        },
        "quantity": {
          "format": "double",
          "description": "quantity (optional, matches the field in NewOrder)",
          "type": "number"
        },
        "limit": {
          "format": "double",
          "description": "limit price (optional, matches the field in NewOrder)",
          "type": "number"
        },
        "ceiling": {
          "format": "double",
          "description": "ceiling (optional, matches the field in NewOrder)",
          "type": "number"
        },
        "timeInForce": {
          "description": "time in force (always present, matches the field in NewOrder)",
          "enum": ["GOOD_TIL_CANCELLED", "IMMEDIATE_OR_CANCEL", "FILL_OR_KILL", "POST_ONLY_GOOD_TIL_CANCELLED"],
          "type": "string"
        },
        "clientOrderId": {
          "format": "uuid",
          "description": "client-provided identifier for advanced order tracking (optional, matches the field in NewOrder)",
          "type": "string"
        },
        "fillQuantity": {
          "format": "double",
          "description": "fill quantity (always present, even when there is no fill)",
          "type": "number"
        },
        "commission": {
          "format": "double",
          "description": "commission (always present, even when there is no fill)",
          "type": "number"
        },
        "proceeds": {
          "format": "double",
          "description": "proceeds (always present, even when there is no fill)",
          "type": "number"
        },
        "status": {
          "description": "order status (always present)",
          "enum": ["OPEN", "CLOSED"],
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "timestamp (UTC) of order creation (always present)",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "description": "timestamp (UTC) of last order update (optional)",
          "type": "string"
        },
        "closedAt": {
          "format": "date-time",
          "description": "timestamp (UTC) when this order was closed (optional)",
          "type": "string"
        }
      }
    },
    "ServicePing": {
      "required": ["serverTime"],
      "type": "object",
      "properties": {
        "serverTime": {
          "format": "int64",
          "description": "Server time in epoch millisecond format, rounded down to the nearest second.\r\nThe same format must be used in the Api-Timestamp header of authenticated requests.",
          "type": "integer"
        }
      }
    },
    "Subaccount": {
      "required": ["id", "createdAt"],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "unique ID of this subaccount",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "timestamp when this subaccount was created",
          "type": "string"
        }
      }
    },
    "NewSubaccount": {
      "type": "object",
      "properties": {}
    },
    "SentTransferInfo": {
      "required": ["toSubaccountId", "id", "currencySymbol", "amount", "executedAt"],
      "type": "object",
      "properties": {
        "toSubaccountId": {
          "format": "uuid",
          "description": "receiver account ID",
          "type": "string"
        },
        "toMasterAccount": {
          "description": "transfer to master account",
          "type": "boolean"
        },
        "id": {
          "format": "uuid",
          "description": "unique ID for this transfer",
          "type": "string"
        },
        "requestId": {
          "format": "uuid",
          "description": "client transfer id",
          "type": "string"
        },
        "currencySymbol": {
          "description": "currency symbol transfered",
          "type": "string"
        },
        "amount": {
          "format": "double",
          "description": "amount transfered",
          "type": "number"
        },
        "executedAt": {
          "format": "date-time",
          "description": "time stamp when this transfer was executed",
          "type": "string"
        }
      }
    },
    "ReceivedTransferInfo": {
      "required": ["fromSubaccountId", "id", "currencySymbol", "amount", "executedAt"],
      "type": "object",
      "properties": {
        "fromSubaccountId": {
          "format": "uuid",
          "description": "sender account ID",
          "type": "string"
        },
        "fromMasterAccount": {
          "description": "transfer from master account",
          "type": "boolean"
        },
        "id": {
          "format": "uuid",
          "description": "unique ID for this transfer",
          "type": "string"
        },
        "requestId": {
          "format": "uuid",
          "description": "client transfer id",
          "type": "string"
        },
        "currencySymbol": {
          "description": "currency symbol transfered",
          "type": "string"
        },
        "amount": {
          "format": "double",
          "description": "amount transfered",
          "type": "number"
        },
        "executedAt": {
          "format": "date-time",
          "description": "time stamp when this transfer was executed",
          "type": "string"
        }
      }
    },
    "NewTransfer": {
      "required": ["currencySymbol", "amount"],
      "type": "object",
      "properties": {
        "toSubaccountId": {
          "format": "uuid",
          "description": "receiver account ID",
          "type": "string"
        },
        "requestId": {
          "format": "uuid",
          "description": "client transfer id",
          "type": "string"
        },
        "currencySymbol": {
          "description": "currency symbol transfered",
          "type": "string"
        },
        "amount": {
          "format": "double",
          "description": "amount transfered",
          "type": "number"
        },
        "toMasterAccount": {
          "description": "transfer to master account",
          "type": "boolean"
        }
      }
    },
    "Withdrawal": {
      "required": ["id", "currencySymbol", "quantity", "cryptoAddress", "status", "createdAt"],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "unique ID for this withdrawal, assigned by the service (always present)",
          "type": "string"
        },
        "currencySymbol": {
          "description": "unique symbol of currency to withdraw (always present, matches the field in NewWithdrawal)",
          "type": "string"
        },
        "quantity": {
          "format": "double",
          "description": "quantity to withdraw (always present, matches the field in NewWithdrawal)",
          "type": "number"
        },
        "cryptoAddress": {
          "description": "crypto address for this withdrawal (always present, matches the field in NewWithdrawal)",
          "type": "string"
        },
        "cryptoAddressTag": {
          "description": "custom message further specifying how to complete the withdrawal (optional, matches the field in NewWithdrawal)",
          "type": "string"
        },
        "txCost": {
          "format": "double",
          "description": "TxCost of this withdrawal (always present)",
          "type": "number"
        },
        "txId": {
          "description": "TxID associated with this withdrawal (optional)",
          "type": "string"
        },
        "status": {
          "description": "current status of this withdrawal (always present)",
          "enum": ["REQUESTED", "AUTHORIZED", "PENDING", "COMPLETED", "ERROR_INVALID_ADDRESS", "CANCELLED"],
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "time stamp when this withdrawal was initiated (always present)",
          "type": "string"
        },
        "completedAt": {
          "format": "date-time",
          "description": "time stamp when this withdrawal was completed (optional)",
          "type": "string"
        }
      }
    },
    "NewWithdrawal": {
      "required": ["currencySymbol", "quantity", "cryptoAddress"],
      "type": "object",
      "properties": {
        "currencySymbol": {
          "description": "unique symbol of the currency to withdraw from",
          "type": "string"
        },
        "quantity": {
          "format": "double",
          "description": "quantity to withdraw",
          "type": "number"
        },
        "cryptoAddress": {
          "description": "crypto address to withdraw funds to",
          "type": "string"
        },
        "cryptoAddressTag": {
          "description": "custom message further specifying how to complete the withdrawal\r\n(optional, depends on whether the cryptoAddress is sufficient for this currency)",
          "type": "string"
        }
      }
    },
    "DeleteOrder": {
      "description": "Payload for cancelling an existing order",
      "required": ["id"],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "order Id to be cancelled.",
          "type": "string"
        }
      }
    },
    "Error": {
      "required": ["code"],
      "type": "object",
      "properties": {
        "code": {
          "description": "error code associated with this particular error",
          "type": "string"
        },
        "detail": {
          "description": "additional information describing the error and/or the included data (optional)",
          "type": "string"
        },
        "data": {
          "description": "a set of key-value pairs containing data relevant to this particular error (optional)",
          "type": "object"
        }
      }
    }
  },
  "x-spectacle-topics": {
    "Pre-Release Warning": {
      "description": "> **Warning**: The v3-Beta or other pre-release API versions are not for production use.\n\n The v3-Beta release will be subject to breaking changes, potentially without notice, until the final API is released. Pre-release APIs should only be used for testing and review.\n\nThe v3-Beta API will operate against production (live-site) data and accounts and we recommend using test accounts and small-value transactions to validate your implementation.\n\nBy using the v3-Beta API you understand and agree that issues may be encountered without warning, affecting your use of the website and API. Bittrex provides no warranties, either express or implied, as to the suitability or usability of pre-release APIs. Bittrex will not be liable for any loss, whether such loss is direct, indirect, special or consequential, suffered by any party as a result of their use of the v3-Beta API or other pre-release APIs. "
    },
    "Change Log": {
      "description": "__08/08/2019__\n\n - Get all tickers: You can now use the v3 API to retrieve the bid/ask/last for all markets at once by getting v3/markets/ticker instead of querying each market individually.\n\n - Currency logos: When getting currency information from v3/currencies the response will now include a URL for an image containing the currency's logo. \n\n__06/26/2019__ \n\n - Ceiling Sell orders have been added to the V3 API Beta. This option allows you to instruct the system to sell enough of the base currency to increase your account balance of the quote currency by the specified amount. \n\nTo see all of the recent changes, please visit the [change list](https://bittrex.zendesk.com/hc/en-us/sections/200567324-Changelist)."
    },
    "Known Issues": {
      "description": " - Deposits from before 1/1/2019 are not returned by GET /deposits/closed.\n\n -  The `baseVolume` under GET /markets/summaries and GET /markets/{marketSymbol}/candles is actually the quote volume."
    },
    "Getting Started": {
      "description": "Keep the following in mind when developing against the Bittrex API: \n - Enable 2FA on your account. API Keys cannot be generated unless 2FA is enabled and extended verification is done on the account.\n - All REST requests must be sent to `https://api.bittrex.com/v3` using the `application/json` content type. Non-HTTPS requests will be redirected to HTTPS, possibly causing functional or performance issues with your application."
    },
    "Best Practices": {
      "description": "### Call Limits\n The Bittrex API employs call limits on all endpoints to ensure the efficiency and availability of the platform for all customers. In general, API users are permitted to make a maximum of 60 API calls per minute. Calls after the limit will fail, with the limit resetting at the start of the next minute.\n\n __Note: Corporate and high-volume accounts may contact customer support for additional information to ensure that they may continue operating at an optimal level.__"
    },
    "Pagination": {
      "description": "### Overview\n Several Bittrex API resources support bulk fetches via 'list' API methods. For example, you can list deposits, list closed orders, and list withdrawals. These list API methods share a common structure, using at least these three parameters: `pageSize, nextPageToken and previousPageToken.` These parameters, if necessary are specified as query parameters on the HTTP request.\n\n ### Arguments:\n\n\n\n - __pageSize(optional)__: A limit on the number of objects to be returned between 1 and 200, defaults to 100\n - __nextPageToken(optional)__: It is a cursor for for using pagination and acts is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects ending with objFoo, your subsequent call can include `nextPageToken=objFoo` in order to fetch the next page of the list. Typically used for paginating in the forward direction.\n\n - __previousPageToken(optional)__: It is a cursor for for using pagination and acts is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects starting with objBar, your subsequent call can include `previousPageToken=objBar` in order to fetch the previous page of the list. Typically used for paginating in the reverse direction.\n\n\n ### Examples:\n\nList withdrawals, in reverse chronological order, up to maximum of 20 withdrawals, starting at the most recent withdrawal created:\n\n`https://api.bittrex.com/v3/withdrawals?pageSize=20`\n\nList withdrawals, in reverse chronological order, up to maximum of 10 withdrawals, starting after the withdrawal with ID of `940af3c3-665d-4432-a12e-cdf8fd99ab3b`\n\n`https://api.bittrex.com/v3/withdrawals?pageSize=10&nextPageToken=940af3c3-665d-4432-a12e-cdf8fd99ab3b`\n\n List withdrawals, in reverse chronological order, up to a maximum of 10 withdrawals, ending before the withdrawal with ID of `0d990dd2-4103-4d57-8e80-047e886537db`: \n\n`https://api.bittrex.com/v3/withdrawals?pageSize=10&previousPageToken=0d990dd2-4103-4d57-8e80-047e886537db`\n\n"
    },
    "Placing Orders": {
      "description": "### __Order Types__:\n\n - __Market Order__ :An order to buy or sell an asset immediately at the best available price. The price at which a market order will execute often deviates from the last-traded price or “real time” quote.\n\n - __Limit Order__ :An order to trade a specified quantity of an asset at a specified rate or better.A buy order will only be filled at or below the limit price and a sell order will only be filled at or above the limit price.\n\n - __Ceiling Order__ : It is a type of market order which executes orders to buy/sell a specified total value of the order at the best, currently available price (e.g. buy $100 USD of BTC at the current market BTC price)\n\n - __Good-Til-Cancelled Order__ : A Good-Til-Cancelled (GTC) order is an order to buy or sell a token that lasts until the order is completed, expired, or cancelled.The maximum lifetime of any order is 28 days. Any order older then 28 days will be automatically canceled by the system and all reserved funds will be returned to your account.\n\n - __Immediate-Or-Cancel Order__ : An Immediate-Or-Cancel (IOC) order is an order to buy or sell a token that must be executed immediately. Any portion of an IOC order that cannot be filled immediately will be cancelled.\n\n - __Fill-or-Kill__ : This option allows orders to be placed which will be filled immediately and completely, or not at all.\n\n - __Post Only__ : This option allows market makers to ensure that their orders are making it to the order book instead of matching with a pre-existing order. Note: If the order is not a maker order, you will return an error and the order will be cancelled \n\n\n ### __Order types and time in force__ : \n\n The following table shows which time in force options apply to which order types.\n\n\n<div style='overflow-x:auto;'><table><tbody><tr><th>timeInForce</th><th>LIMIT</th><th>MARKET</th><th>CEILING_LIMIT</th><th>CEILING_MARKET</th></tr><tr><td>GOOD_TIL_CANCELLED</td><td>BUY OR SELL</td><td>NOT ALLOWED</td><td>NOT ALLOWED</td><td>NOT ALLOWED</td></tr><tr><td>IMMEDIATE_OR_CANCEL</td><td>BUY OR SELL</td><td>BUY OR SELL</td><td>BUY OR SELL</td><td>BUY OR SELL</td></tr><tr><td>FILL_OR_KILL</td><td>BUY OR SELL</td><td>BUY OR SELL</td><td>BUY OR SELL</td><td>BUY OR SELL</td></tr><tr><td>POST_ONLY_GOOD_TIL_CANCELLED</td><td>BUY OR SELL</td><td>NOT ALLOWED</td><td>NOT ALLOWED</td><td>NOT ALLOWED</td></tr></tbody></table></div> \n\n\n ### __clientOrderId__: \n\n It is an optional UUID which is generated by the user to to keep a track of the order. If the outcome of placing an order is not known (for example due to a client-side crash that occurred while placing the order), the same order can be safely placed again using the same UUID as the clientOrderId. If the order was received and processed the first time, the API will return an error that includes the existing order's id instead of creating a second order. This protection is in place for 24 hours after an order is placed. Although clientOrderIds which are more than 24 hours old are no longer checked against new orders, they remain associated with their orders as metadata and may be retrieved by clients.\n\n"
    },
    "Sub Accounts": {
      "description": "(NOTE: This functionality is limited to partners and unavailable to general traders.)\n\nThe subaccount feature will enable partners to create a sub accounts for each of their users allowing the users to create sub account deposit addresses, manage deposit and withdrawal transactions as well as place orders from for the sub and access historical data.\n\n\n ### Getting Started: \n\n Key points to remember before working with this feature :\n\n - Enable 2FA on your account as the API Keys cannot be generated unless 2FA is enabled and extended verification is done on the account.\n\n - When enabled, authentication mechanism will need to be modified which is shown under `Api-subaccount-ID` under Authentication with with examples."
    },
    "Error Codes": {
      "description": "### __Overview__:\n\n If an error occurs during the processing of an API request, the Bittrex API will return an error to the caller. The general flow of information to check is:\n\n - status code of the response.\n\n - error code and other information in the response body (JSON)\n\n### __HTTP Status Codes__\n\n<div style='overflow-x:auto;'><table><tbody><tr><th>Status Code</th><th>Description</th></tr><tr><td>400 - Bad Request</td><td>The request was malformed, often due to a missing or invalid parameter. See the error code and response data for more details.</td></tr><tr><td>401 - Unauthorized</td><td>The request failed to authenticate (example: a valid api key was not included in your request header)</td></tr><tr><td>403 - Forbidden</td><td> The provided api key is not authorized to perform the requested operation (example: attempting to trade with an api key not authorized to make trades)</td></tr><tr><td>404 - Not Found</td><td>The requested resource does not exist.</td></tr><tr><td>409 - Conflict</td><td>The request parameters were valid but the request failed due to an operational error. (example: INSUFFICIENT_FUNDS) </td><tr><td>429 - Too Many Requests</td><td>Too many requests hit the API too quickly. Please make sure to implement exponential backoff with your requests.</td></tr><tr><td>501 - Not Implemented</td><td>The service requested has not yet been implemented.</td></tr><tr><td>503 - Service Unavailable</td><td>The request parameters were valid but the request failed because the resource is temporarily unavailable (example: CURRENCY_OFFLINE)</td></tr></tbody></table></div>\n\n"
    }
  },
  "securityDefinitions": {
    "api_key": {
      "description": "### Overview\n In order to properly sign an authenticated request for the Bittrex v3 API, the following headers must be included:\n\n- `Api-Key`\n\n- `Api-Timestamp`\n\n- `Api-Content-Hash`\n\n- `Api-Signature`\n\n- `Api-Subaccount-Id (optional)`\n\n\nThe following sections are instructions for properly populating these headers.\n\n---\n #### Api-Key\nPopulate this header with your API key.\n\nExample Value:\n\n`4894xxxxxxxx407e827d05xxxxxxxxxx`\n\n---\n #### Api-Timestamp\nPopulate this header with the current time as a UNIX timestamp, in epoch-millisecond format.\n\nSample JS Code Snippet:\n\n``` javascript\nvar timestamp = new Date().getTime();\n```\n\nExample Value:\n\n`1542323450016`\n\n---\n #### Api-Content-Hash\nPopulate this header with a SHA512 hash of the request contents, Hex-encoded. If there are no request contents, populate this header with a SHA512 hash of an empty string.\n\nSample JS Code Snippet:\n\n``` javascript\nvar contentHash = CryptoJS.SHA512(content).toString(CryptoJS.enc.Hex);\n```\n\nExample Value:\n\n``` markdown\ncf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e\n```\n\n---\n #### Api-Subaccount-Id (Only for subaccount feature) \n(NOTE: This functionality is limited to partners and unavailable to general traders.)\n\nIf you wish to make a request on behalf of a subaccount, you will need to:\n\n1. Authenticate using all 4 of the headers above referring to your master account.\n2. Populate the Api-Subaccount-Id header with the UUID of the subaccount you wish to impersonate for this request. The specified subaccount *must* be a subaccount of the master account used to authenticate the request.\n3. Include the Api-Subaccount-Id header at the end of the pre-signed signature, as indicated in the next section.\n\nExample Value:\n\n`x111x11x-8968-48ac-b956-x1x11x111111`\n\n---\n #### Api-Signature\nCreate a pre-sign string formed from the following items and concatenating them together:\n1. Contents of your `Api-Timestamp` header\n2. The full URI you are using to make the request (including query string)\n3. The HTTP method of the request, in all caps (GET, POST, DELETE, etc.)  \n4. Contents of your `Api-Content-Hash` header \n5. Content of your `Api-Subaccount-Id` header (or an empty string if not present) \n\n\nOnce you have created this pre-sign string, sign it via HmacSHA512, using your API secret as the signing secret. Hex-encode the result of this operation and populate the `Api-Signature` header with it.\n\n\nSample JS Code Snippet:\n\n``` javascript\nvar uri = 'https://api.bittrex.com/v3/balances';\nvar preSign = [timestamp, uri, method, contentHash, subaccountId].join('');\nvar signature = CryptoJS.HmacSHA512(preSign, apiSecret).toString(CryptoJS.enc.Hex);\n```\n\nExample Pre-Signed Value (no subaccount)\n\n``` markdown\n1542323450016https://api.bittrex.com/v3/balancesGETcf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e\n```\n\nExample Pre-Signed Value (with subaccount)\n\n``` markdown\n1542323450016https://api.bittrex.com/v3/balancesGETcf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3ex111x11x-8968-48ac-b956-x1x11x111111\n```\n\nExample Post-Signed Value:\n\n``` markdown\n939047623f0efbe10bfbb32f18e5d8885b2a91be3c3cea82adf0dd2d20892b20bcb6a10a91fec3afcedcc009f2b2a86c5366974cfadcf671fe0490582568f51f\n```\n\n\n"
    }
  }
}
